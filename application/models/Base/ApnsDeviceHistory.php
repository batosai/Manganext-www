<?php

/**
 * Model_Base_ApnsDeviceHistory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $pid
 * @property string $appname
 * @property string $appversion
 * @property string $deviceuid
 * @property string $devicetoken
 * @property string $devicename
 * @property string $devicemodel
 * @property string $deviceversion
 * @property enum $pushbadge
 * @property enum $pushalert
 * @property enum $pushsound
 * @property enum $development
 * @property enum $status
 * @property timestamp $archived
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Model_Base_ApnsDeviceHistory extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('apns_device_history');
        $this->hasColumn('pid', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '8',
             ));
        $this->hasColumn('appname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('appversion', 'string', 25, array(
             'type' => 'string',
             'default' => 'NULL',
             'length' => '25',
             ));
        $this->hasColumn('deviceuid', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '40',
             ));
        $this->hasColumn('devicetoken', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '64',
             ));
        $this->hasColumn('devicename', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('devicemodel', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '100',
             ));
        $this->hasColumn('deviceversion', 'string', 25, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '25',
             ));
        $this->hasColumn('pushbadge', 'enum', null, array(
             'type' => 'enum',
             'fixed' => 1,
             'values' => 
             array(
              0 => 'disabled',
              1 => 'enabled',
             ),
             'default' => 'disabled',
             ));
        $this->hasColumn('pushalert', 'enum', null, array(
             'type' => 'enum',
             'fixed' => 1,
             'values' => 
             array(
              0 => 'disabled',
              1 => 'enabled',
             ),
             'default' => 'disabled',
             ));
        $this->hasColumn('pushsound', 'enum', null, array(
             'type' => 'enum',
             'fixed' => 1,
             'values' => 
             array(
              0 => 'disabled',
              1 => 'enabled',
             ),
             'default' => 'disabled',
             ));
        $this->hasColumn('development', 'enum', null, array(
             'type' => 'enum',
             'fixed' => 1,
             'values' => 
             array(
              0 => 'production',
              1 => 'sandbox',
             ),
             'notnull' => true,
             'default' => 'production',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'fixed' => 1,
             'values' => 
             array(
              0 => 'active',
              1 => 'uninstalled',
             ),
             'notnull' => true,
             'default' => 'active',
             ));
        $this->hasColumn('archived', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}